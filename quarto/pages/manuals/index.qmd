---
title: "SALURBAL - Renovation Workflow"
subtitle: "This workflow goes through the steps needed to generate FAIR SALURBAL data."
pagetitle: "SALURBAL - FAIR Renovation"
execute: 
  echo: false
  warning: false
  error: false
editor_options: 
  chunk_output_type: console
---

```{r}
## Data prep
library(tidyverse)
library(reactable)
library(shiny)
library(htmltools)

load("../fair/files/quarto-f2-objects.rdata")
load("../fair/files/quarto-f3-objects.rdata")
load("../fair/files/renovation-objects.rdata")

## Reactable theming
salurbal_reactable = reactableTheme(
  color = "#5e666d",
  backgroundColor = "#e6ebee",
  borderColor = "black",
  stripedColor = "black",
  highlightColor = "bfc5c9",
  headerStyle = list(
    fontWeight = "bolder",
    fontSize = 'larger',
    borderColor = "#555"
  ),
  searchInputStyle = list(width = "98%",
                          backgroundColor = "#e6ebee",
                          margin = "auto",
                          marginTop = "3px",
                          marginBottom = "3px")
)

## Row styling 
get_row_color = function(description_tmp){
  colorTmp = case_when(
    str_detect(description_tmp,"IDENTIFIERS")~"#f4d7ad",
    str_detect(description_tmp,"STRATA DETAILS")~"#b3e9d5",
    str_detect(description_tmp,"CATEGORIZATION")~"#a3ccdf",
    str_detect(description_tmp,"INTERNAL")~"#ebd7f3",
    str_detect(description_tmp,"DETAILS")~"#c5fbc5",
    TRUE~"#e6ebee"
  )
}

## Local objects
strata_vars = c('var_name','strata_1_name','strata_1_value','strata_2_name','strata_2_value')
```

## Overview

Due to the heterogeneity in existing SALURBAL data/codebooks, the process of how each dataset is renovate will differ. The Renovation manuals pages will provide guidance for the FAIR renovation of SALURBAL data as well as provide instructions for new SALURBAL datasets. The steps are summarized in the list below. 


- **Step 1: Assign `var_name` to each variable**
- **Step 2: Summarize strata information for each variable**
- **Step 3: Evaluate metadata linkage**
- **Step 4: Renovate codebooks**
- **Step 5: Renovate data.csv**

## Deliverables at each step 

The deliverables at each step are displayed in the tabs below. Within each step there are tabs that contain examples (table + downloadable csv) of deliverables for three different datasets. 

:::: {.column-screen-inset-right}

::: {.panel-tabset}


### 1. var_name.csv

**`var_name.csv`is a table summarizing var_name called . It should contain two columns:**

- `var_name`
- `dataset_id`


::: {.panel-tabset}

##  Air Pollution Dataset (APS)



```{r}

htmltools::browsable(
  tagList(
    tags$button("Download var_name.csv for APS", onclick = "Reactable.downloadDataCSV('step1_aps')"),
step1_aps  %>% 
  reactable(
          elementId = "step1_aps",

    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )
    
  )
)

```

## SEC Census dataset (CNS) 


```{r}

htmltools::browsable(
  tagList(
    tags$button("Download var_name.csv for CNS", onclick = "Reactable.downloadDataCSV('step1_cns')"),

step1_cns   %>% 
  reactable(
              elementId = "step1_cns",
pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )

    
  )
)
```

## Health Survey (SVY) 
 
```{r}

htmltools::browsable(
  tagList(
    tags$button("Download var_name.csv for SVY", onclick = "Reactable.downloadDataCSV('step1_svy')"),
step1_svy  %>% 
  reactable(
                  elementId = "step1_svy",
pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )
))
```

:::


### 2. strata.csv

**`strata.csv` is a table that contains all possible strata_id for each variable. This will organize strata information 'long' meaning if a variable is stratified there should be multiple rows per variable. It should contain the following columns **  

- `var_name`
- `strata_1_name`: name of the first strata. Should have no spaces and no underdashes '_' all text should be in Pascal case.
- `strata_1_value` value of the first strata. Should have no spaces and no underdashes '_' all text should be in Pascal case.
- `strata_2_name`  name of the second strata. Should have no spaces and no underdashes '_' all text should be in Pascal case.
- `strata_2_value` value of the second strata. Should have no spaces and no underdashes '_' all text should be in Pascal case.
 

::: {.panel-tabset}

##  Air Pollution Dataset (APS)




```{r}

htmltools::browsable(
  tagList(
    tags$button("Download strata.csv for APS", onclick = "Reactable.downloadDataCSV('step2_aps')"),
step2_aps  %>% 
  mutate(strata_1_raw = NA,
         strata_2_raw = NA) %>%
  select(var_name, 
         strata_1_name, strata_1_raw, strata_1_value, 
         strata_2_name, strata_2_raw, strata_2_value) %>% 
  reactable(
          elementId = "step2_aps",

    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )
    
  )
)

```

## SEC Census dataset (CNS) 


```{r}

htmltools::browsable(
  tagList(
    tags$button("Download strata.csv for CNS", onclick = "Reactable.downloadDataCSV('step2_cns')"),

step2_cns   %>%  
  mutate(strata_1_raw = strata_1_value %>% recode("Overall"="9",
                                                  "Male"="1",
                                                  "Female"="0",
                                                  "Ratio"= "ratio"),
         strata_2_raw = NA) %>%
  select(var_name, 
         strata_1_name, strata_1_raw, strata_1_value, 
         strata_2_name, strata_2_raw, strata_2_value) %>% 
  reactable(
              elementId = "step2_cns",
pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )

    
  )
)
```

## Health Survey (SVY) 
 
```{r}

htmltools::browsable(
  tagList(
    tags$button("Download strata.csv for SVY", onclick = "Reactable.downloadDataCSV('step2_svy')"),
    step2_svy  %>% 
      mutate(strata_1_raw = strata_1_value %>% recode("Overall"="9",
                                                      "Male"="1",
                                                      "Female"="0"),
             strata_2_raw = strata_2_value) %>%
      select(var_name, 
             strata_1_name, strata_1_raw, strata_1_value, 
             strata_2_name, strata_2_raw, strata_2_value) %>% 
      
      reactable(
        elementId = "step2_svy",
pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      )
    ),
    theme = salurbal_reactable
  )
))
```

:::

### 3. linkage.csv

**`linkage.csv` is a table that describes how the linkage for each of the codebook fields. Starting with this template (<a href="../fair/files/linkage.csv" download>ðŸ“¥ linkage.csv</a>), for each codebook field (row) you should write a value of '1' in the column cells if any variable falls under that linkage type.**


::: {.panel-tabset}


##  Air Pollution Dataset (APS)

All codebook fields are linkable only by_variable for the APS dataset so we for all codebook fields we only check (fill out the cell as '1') the by_var column. 

```{r}
df1 = read_csv("../fair/files/ex_APS_codebook_evaluation.csv")

htmltools::browsable(
  tagList(
    tags$button("Download linkage.csv for APS", onclick = "Reactable.downloadDataCSV('step3_aps')"),
df1  %>% 
  reactable(
         elementId = "step3_aps",

    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(width = 150),
    theme = salurbal_reactable
  )
))
```

## SEC Census dataset (CNS) 

Most of the codebook fields in the CNS dataset are linkable only be variable except for:

- `source` vary by `var_name`+`iso2` for some variables but other do not for other variables; so this row has both `by_var` and `by_var_iso2` filled out. 

```{r}
df2 = read_csv("../fair/files/ex_CNS_codebook_evaluation.csv")

htmltools::browsable(
  tagList(
    tags$button("Download linkage.csv for CNS", onclick = "Reactable.downloadDataCSV('step3_cns')"),

      

df2  %>% 
  reactable(
       elementId = "step3_cns",
       pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(width = 150),
    theme = salurbal_reactable
  )
))
```

## Health Survey (SVY) 

Most of the codebook fields in the SVY dataset are linkable only be variable except for:

- `var_def` vary by `var_name`+`strata` for some variables but other do not for other variables; so this row has both `by_var` and `by_var_strata` filled out. 
- `source` vary by `var_name`+`iso2` for some variables but other do not for other variables; so this row has both `by_var` and `by_var_iso2` filled out. 

```{r}
df3 = read_csv("../fair/files/ex_SVY_codebook_evaluation.csv")

htmltools::browsable(
  tagList(
    tags$button("Download linkage.csv for SVY", onclick = "Reactable.downloadDataCSV('step3_svy')"),

      df3  %>% 
  reactable(
    pagination = FALSE, 
          elementId = "step3_svy",
 highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(width = 150),
    theme = salurbal_reactable
  )
  ))
```

:::

### 4. codebook.csv

**For each data set review the metadta linkage evaluation. For each unique linkage that is present in your dataset you will need to prepare the assosiated codebook.** The thought process and deliverables for our three example datasets can be seen below. 



::: {.panel-tabset}


##  Air Pollution Dataset (APS)

**Based on the <a href="../fair/files/ex_APS_codebook_evaluation.csv" download>APS codebook evaluation</a> we saw that all the metadata are categorized as simple; therefor our step -4-codebooks deliverable for this dataset contains one file - codebook_simple.csv**


:::::  {.panel-tabset}

#### codebook_simple.csv


```{r}
aps_simple %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```

:::::  


## SEC Census dataset (CNS) 



**Based on the <a href="../fair/files/ex_CNS_codebook_evaluation.csv" download>CNS codebook evaluation</a> we saw:**

- 17 simple fields
- 2 by_country fields (source, public)

**Therefore we need to prepare two codebooks for this dataset (see below).**


:::::  {.panel-tabset}

#### codebook_simple.csv 


```{r}
cns_simple %>%
  reactable(
    pagination = FALSE,
    highlight = TRUE,
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```

#### codebook_by_iso2.csv


```{r}
cns_iso2 %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```
:::::  

## Health Survey (SVY) 


**Based on the <a href="../fair/files/ex_SVY_codebook_evaluation.csv" download>SVY codebook evaluation</a> we saw:**

- 15 simple fields
- 2 by_country fields (source, public, censor)
- 2 by_strata (var_def, interpretation)

**Therefore we need to prepare three codebooks for this dataset (see below).**



:::::  {.panel-tabset}

#### codebook_simple.csv 


```{r}
svy_simple %>%
  reactable(
    pagination = FALSE,
    highlight = TRUE,
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```

#### codebook_by_iso2.csv


```{r}
svy_iso2 %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```


#### codebook_by_strata.csv


```{r}
svy_strata %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    columns = list(
      field = colDef(
        width  = 150
      ),
      description = colDef(
        minWidth = 350
      )
    ),
    theme = salurbal_reactable
  )
```
:::::  

:::


### 5. data.csv


**For each dataset you should have a data.csv as a deliverable**



::: {.panel-tabset}


##  Air Pollution Dataset (APS)

**aps_data.csv**

```{r}
aps_data %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    theme = salurbal_reactable
  )
```


## SEC Census dataset (CNS) 

**cns_data.csv**

```{r}
cns_data %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    theme = salurbal_reactable
  )
```

## Health Survey (SVY) 

**svy_data.csv**

```{r}
svy_data %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    height = 500,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 150),
    theme = salurbal_reactable
  )
```

**Based on the <a href="../fair/files/ex_SVY_codebook_evaluation.csv" download>SVY codebook evaluation</a> we saw:**

- 15 simple fields
- 2 by_country fields (source, public, censor)
- 2 by_strata (var_def, interpretation)

**Therefore we need to prepare three codebooks for this dataset (see below).**



:::




:::
 

::::



## Deliverables summary

So for the three examples we provided here are the final deliverable files. 

:::: {.column-screen-inset-right}

```{r}
read_csv("../fair/files/salurbal-renovation-outputs.csv") %>% 
  filter(!is.na(dataset)) %>% 
  reactable(
    pagination = FALSE, 
    highlight = TRUE,  
    sortable = F,
    defaultPageSize = 20,
    defaultColDef = colDef(minWidth = 200),
    theme =  reactableTheme(
  color = "#5e666d",
  backgroundColor = "#e6ebee",
  borderColor = "black",
  stripedColor = "black",
  highlightColor = "bfc5c9",
  headerStyle = list(
    fontWeight = "bolder",
    fontSize = 'smaller',
    borderColor = "#555"
  ),
  searchInputStyle = list(width = "98%",
                          backgroundColor = "#e6ebee",
                          margin = "auto",
                          marginTop = "3px",
                          marginBottom = "3px")
)
  )
```


::::